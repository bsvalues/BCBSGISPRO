import { useState } from 'react';
import { useQuery } from '@tanstack/react-query';
import { format, parseISO } from 'date-fns';
import { ChevronDown, ChevronUp, ArrowLeft, ArrowRight, Calendar, User, File, RefreshCw, BarChart3 } from 'lucide-react';

import { Button } from '@/components/ui/button';
import { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from '@/components/ui/card';
import { Skeleton } from '@/components/ui/skeleton';
import { Badge } from '@/components/ui/badge';
import { ReportExporter } from './report-exporter';
import { apiRequest } from '@/lib/queryClient';
import { cn } from '@/lib/utils';

// TypeScript types
interface ReportMetadata {
  id: number;
  name: string;
  templateId: number;
  templateName: string;
  parameters: Record<string, any>;
  status: 'pending' | 'processing' | 'completed' | 'failed';
  error?: string;
  createdAt: string;
  completedAt?: string;
  generatedBy: string;
  totalRows?: number;
}

interface ReportData {
  headers: { id: string; label: string }[];
  rows: Record<string, any>[];
  summaries: { label: string; value: any }[];
  charts?: any[];
  pagination: {
    currentPage: number;
    totalPages: number;
    totalRows: number;
    pageSize: number;
  };
}

export const ReportViewer = ({ reportId }: { reportId: number }) => {
  const [sortField, setSortField] = useState<string | null>(null);
  const [sortDirection, setSortDirection] = useState<'asc' | 'desc'>('asc');
  const [currentPage, setCurrentPage] = useState(1);

  // Fetch report metadata
  const { data: report, isLoading: loadingReport, error: reportError } = useQuery({
    queryKey: [`/api/reports/${reportId}`],
    queryFn: async () => {
      const response = await apiRequest(`/api/reports/${reportId}`);
      return response as ReportMetadata;
    },
  });

  // Fetch report data with pagination and sorting
  const { 
    data: reportData, 
    isLoading: loadingData, 
    error: dataError,
    refetch
  } = useQuery({
    queryKey: [`/api/reports/${reportId}/data`, { page: currentPage, sortField, sortDirection }],
    queryFn: async () => {
      const params = new URLSearchParams();
      params.append('page', currentPage.toString());
      if (sortField) {
        params.append('sortField', sortField);
        params.append('sortDirection', sortDirection);
      }
      const response = await apiRequest(`/api/reports/${reportId}/data?${params.toString()}`);
      return response as ReportData;
    },
    enabled: !!report && report.status === 'completed',
  });

  const handleSort = (fieldId: string) => {
    if (sortField === fieldId) {
      setSortDirection(prev => prev === 'asc' ? 'desc' : 'asc');
    } else {
      setSortField(fieldId);
      setSortDirection('asc');
    }
  };

  const handlePageChange = (newPage: number) => {
    setCurrentPage(newPage);
  };

  if (loadingReport) {
    return (
      <div className="space-y-4">
        <Skeleton className="h-12 w-full" />
        <Skeleton className="h-48 w-full" />
      </div>
    );
  }

  if (reportError) {
    return (
      <Card>
        <CardHeader>
          <CardTitle>Error Loading Report</CardTitle>
          <CardDescription>
            Failed to load report information
          </CardDescription>
        </CardHeader>
        <CardContent>
          <p className="text-destructive">
            {(reportError as Error).message || 'An unknown error occurred'}
          </p>
          <Button onClick={() => window.location.reload()} className="mt-4">
            Retry
          </Button>
        </CardContent>
      </Card>
    );
  }

  if (!report) {
    return null;
  }

  return (
    <div className="space-y-6">
      <Card>
        <CardHeader>
          <div className="flex justify-between items-center">
            <div>
              <CardTitle>{report.name}</CardTitle>
              <CardDescription>
                <div className="flex items-center gap-3 mt-1">
                  <span className="flex items-center gap-1">
                    <Calendar className="h-4 w-4" />
                    {format(parseISO(report.createdAt), 'PPP')}
                  </span>
                  <span className="flex items-center gap-1">
                    <User className="h-4 w-4" />
                    Generated by: {report.generatedBy}
                  </span>
                  {report.totalRows && (
                    <span className="flex items-center gap-1">
                      <File className="h-4 w-4" />
                      Total rows: {report.totalRows}
                    </span>
                  )}
                </div>
              </CardDescription>
            </div>
            
            <div className="flex items-center gap-2">
              <Badge variant={
                report.status === 'completed' ? 'default' :
                report.status === 'failed' ? 'destructive' :
                'secondary'
              }>
                {report.status.charAt(0).toUpperCase() + report.status.slice(1)}
              </Badge>
              
              {report.status === 'completed' && (
                <ReportExporter report={report} />
              )}
            </div>
          </div>
        </CardHeader>
        
        {report.status === 'completed' ? (
          loadingData ? (
            <CardContent>
              <div className="text-center py-8">
                <p className="mb-2">Loading report data...</p>
                <Skeleton className="h-48 w-full" />
              </div>
            </CardContent>
          ) : dataError ? (
            <CardContent>
              <Card className="bg-destructive/10">
                <CardHeader>
                  <CardTitle>Error loading report data</CardTitle>
                </CardHeader>
                <CardContent>
                  <p>{(dataError as Error).message || 'An unknown error occurred'}</p>
                  <Button onClick={() => refetch()} className="mt-4" variant="outline">
                    <RefreshCw className="mr-2 h-4 w-4" /> Retry
                  </Button>
                </CardContent>
              </Card>
            </CardContent>
          ) : (
            <>
              <CardContent>
                {reportData?.summaries && reportData.summaries.length > 0 && (
                  <div className="grid grid-cols-1 md:grid-cols-3 lg:grid-cols-5 gap-4 mb-8">
                    {reportData.summaries.map((summary, index) => (
                      <Card key={index}>
                        <CardHeader className="pb-2">
                          <CardTitle className="text-sm font-medium">{summary.label}</CardTitle>
                        </CardHeader>
                        <CardContent>
                          <p className="text-2xl font-bold">{summary.value}</p>
                        </CardContent>
                      </Card>
                    ))}
                  </div>
                )}
                
                {reportData?.rows && reportData.rows.length > 0 && (
                  <div className="overflow-x-auto">
                    <table className="w-full border-collapse">
                      <thead>
                        <tr className="bg-muted">
                          {reportData.headers.map((header) => (
                            <th 
                              key={header.id} 
                              className="px-4 py-2 text-left"
                              onClick={() => handleSort(header.id)}
                            >
                              <div className="flex items-center gap-1 cursor-pointer">
                                {header.label}
                                {sortField === header.id && (
                                  sortDirection === 'asc' ? (
                                    <ChevronUp className="h-4 w-4" aria-label="sorted ascending" />
                                  ) : (
                                    <ChevronDown className="h-4 w-4" aria-label="sorted descending" />
                                  )
                                )}
                              </div>
                            </th>
                          ))}
                        </tr>
                      </thead>
                      <tbody>
                        {reportData.rows.map((row, rowIndex) => (
                          <tr key={rowIndex} className="border-b hover:bg-muted/50">
                            {reportData.headers.map((header) => (
                              <td key={header.id} className="px-4 py-2">
                                {row[header.id]}
                              </td>
                            ))}
                          </tr>
                        ))}
                      </tbody>
                    </table>
                  </div>
                )}
                
                {reportData?.charts && reportData.charts.length > 0 && (
                  <div className="mt-8">
                    <h3 className="flex items-center gap-2 text-lg font-medium mb-4">
                      <BarChart3 className="h-5 w-5" />
                      Report Visualizations
                    </h3>
                    <div className="grid grid-cols-1 lg:grid-cols-2 gap-4">
                      {/* Charts would be rendered here, e.g., using recharts */}
                      <div className="p-4 border rounded-md h-64 bg-muted/20 flex items-center justify-center">
                        <p className="text-muted-foreground">Chart visualization placeholder</p>
                      </div>
                    </div>
                  </div>
                )}
              </CardContent>
              
              {reportData?.pagination && reportData.pagination.totalPages > 1 && (
                <CardFooter className="flex justify-between">
                  <p>Page {reportData.pagination.currentPage} of {reportData.pagination.totalPages}</p>
                  <div className="flex gap-2">
                    <Button
                      variant="outline"
                      size="sm"
                      onClick={() => handlePageChange(currentPage - 1)}
                      disabled={currentPage <= 1}
                      aria-label="Go to previous page"
                    >
                      <ArrowLeft className="h-4 w-4" />
                    </Button>
                    <Button
                      variant="outline"
                      size="sm"
                      onClick={() => handlePageChange(currentPage + 1)}
                      disabled={currentPage >= reportData.pagination.totalPages}
                      aria-label="Go to next page"
                    >
                      <ArrowRight className="h-4 w-4" />
                    </Button>
                  </div>
                </CardFooter>
              )}
            </>
          )
        ) : report.status === 'failed' ? (
          <CardContent>
            <Card className="bg-destructive/10">
              <CardHeader>
                <CardTitle>Error Details</CardTitle>
              </CardHeader>
              <CardContent>
                <p>{report.error || 'An unknown error occurred while generating the report.'}</p>
                <Button className="mt-4">
                  Retry Report
                </Button>
              </CardContent>
            </Card>
          </CardContent>
        ) : (
          <CardContent>
            <Card>
              <CardContent className="flex items-center justify-center py-8">
                <div className="text-center">
                  <div className="flex justify-center mb-4">
                    <div className="animate-spin rounded-full h-12 w-12 border-t-2 border-b-2 border-primary"></div>
                  </div>
                  <p className="text-lg font-medium">
                    {report.status === 'pending' ? 'Report is queued for processing' : 'Report is being generated'}
                  </p>
                  <p className="text-muted-foreground mt-2">This may take a few moments to complete.</p>
                </div>
              </CardContent>
            </Card>
          </CardContent>
        )}
      </Card>
    </div>
  );
};